<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormState;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_profile_form()
 */
function simple_pass_reset_form_user_form_alter(&$form, FormState $form_state) {
  $route_match = \Drupal::routeMatch();
  $valid_route = $route_match->getRouteName() == 'simple_pass_reset.reset' || $route_match->getRouteName() == 'simple_pass_reset.reset_brief';

  // Don't alter the normal profile edit form, but only the password reset form.
  if ($valid_route && \Drupal::currentUser()->isAnonymous()) {

    // Our submit handler will log the user in after form submit.
    $form['actions']['submit']['#submit'][] = 'simple_pass_reset_pass_reset_submit';
    $form['actions']['submit']['#value'] = t('Save new password and log in');

    // Links provided by the Bakery module will not work because the user is not
    // logged in yet.
    if (!empty($form['bakery'])) {
      $form['bakery']['#access'] = FALSE;

      // Normally the Bakery module would make the following change to the
      // user_pass_reset form.
      if (!variable_get('bakery_is_master', FALSE)) {
        // Set a submit handler for the pseudo-reset form.
        $form['#submit'] = array('_bakery_reset_submit');
      }
    }

    // Some third-party modules (like Bakery) might hide account elements.
    if (!isset($form['account']['#access']) || $form['account']['#access']) {
      // Require a new password.
      $form['account']['pass']['#required'] = TRUE;

      if ($route_match->getRouteName() == 'simple_pass_reset.reset_brief') {
        /**
         * @todo
         */
        // drupal_set_title(t('Choose a new password')); // Instead of "Reset password".
        // Hide "To change the current user password...".
        unset($form['account']['pass']['#description']);

        // The user is most interested in getting a working password, don't show their picture, timezone, etc.
        foreach (Element::children($form) as $key) {
          if (isset($form[$key]['#type']) && in_array($form[$key]['#type'], array('hidden', 'actions', 'captcha'))) {
            // Do not alter these elements.
          }
          else {
            // Hide other elements.
            $form[$key]['#access'] = FALSE;
          }
        }
        // Except don't hide these.
        $form['account']['#access'] = TRUE;
        $form['actions']['#access'] = TRUE;

        // But seriously do hide these.
        $form['account']['mail']['#access'] = FALSE;
      }
    }

    // This is to avoid a PHP Notice in user_profile_form_submit().  https://www.drupal.org/node/2111293#comment-9262499
    if (empty($_SESSION)) {
      $_SESSION = array('simple_pass_reset' => TRUE);
    }
  }
}

/**
 * Submit callback for Drupal form API.
 */
function simple_pass_reset_pass_reset_submit($form, FormStateInterface $form_state) {
  // Sanity check.
  if (\Drupal::currentUser()->isAnonymous()) {
    // Remove roles that were disabled in the form. Normally the User module
    // will array_filter() these out for us.  But remember_me and possibly other
    // modules have bugs that might prevent it from doing so.
    /*
    if (!empty($form_state['user']->roles)) {
    $form_state['user']->roles = array_filter($form_state['user']->roles);
    }
     */

    // Load the user account afresh and finalize the login.
    // @see user_login_submit()
    global $user;
    $user = user_load($form_state->getValue('uid'));
    user_login_finalize($user);
    \Drupal::logger('user')->notice('User %name used one-time login link.', array('%name' => $user->getUsername()));

    if (!$form_state->getRedirect()) {
      $form_state->setRedirectUrl($user->urlInfo());
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Asks Drupal to run our form_alter hooks after other modules.
 */
function simple_pass_reset_module_implements_alter(&$implementations, $hook) {
  // The hook we're interested in is hook_form_FORM_ID_alter().  Yet, in this function we have to manipulate 'form_alter'.  Because Drupal is tricky like that.
  if ($hook == 'form_alter' && isset($implementations['simple_pass_reset'])) {
    // Make our form alters come last (so we act after other modules have already altered).
    $group = $implementations['simple_pass_reset'];
    unset($implementations['simple_pass_reset']);
    $implementations['simple_pass_reset'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This is not about simplifying the text on the password reset form, but it's
 * behavior.  If a logged in user resets her password, she's sent a link via
 * email.  But will get access denied clicking that link, because she's already
 * logged in!  This hook will log her out when resetting password.  This makes
 * the password reset form behave more like the user edit form when a user
 * changes their own password. (See where user_save() calls
 * drupal_session_destroy_uid().)
 */
function simple_pass_reset_form_user_pass_alter(&$form, &$form_state) {
  // If the user views the password reset form while logged in...
  if (\Drupal::currentUser()->isAuthenticated()) {
    // drupal_set_title(t('Reset my password'));.
    // Update the help text and button text to indicate that submitting the form
    // will log them out.
    $form['mail']['#markup'] = t('We will e-mail a password reset link for your account to %email. You will be logged out when you submit this form and should use that link to log back in.', array('%email' => $form['name']['#value']));
    $form['actions']['submit']['#value'] = t('E-mail reset link and log out');

    // Add a form submit handler to log out upon submission.
    $form['#submit'][] = 'simple_pass_reset_form_user_pass_submit';
  }
}

/**
 * Submit callback: log out when an authenticated user submits the password
 * reset form.
 */
function simple_pass_reset_form_user_pass_submit($form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser();
  if ($user->isAuthenticated()) {
    user_logout();

    /**
     * @todo: The message is lost after logout.
     */
    // Note call drupal_set_message() AFTER session_destroy().
    drupal_set_message(t('The password reset link has been sent to your e-mail address. You are now logged out.'));
    $form_state->setRedirect('<front>');
  }
}
